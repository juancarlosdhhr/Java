public class Clase24 {
    
/* ===============================
 * EJERCICIO 1: HERENCIA Y POLIMORFISMO
 * ===============================
 * Crea una clase llamada Vehiculo, con un m√©todo tipoDeVehiculo(), luego crea dos clases
 * hijas Auto y Moto que sobrescribir√°n ese m√©todo para mostrar el tipo espec√≠fico de veh√≠culo.
 */

// Clase padre Vehiculo
abstract class Vehiculo {
    public abstract void tipoDeVehiculo();
}


/* Se define como abstract porque no se instanciar√°n objetos de esta clase directamente.
Contiene el m√©todo tipoDeVehiculo(), que es abstracto, lo que significa que las clases hijas
estar√°n obligadas a implementarlo. */


// Clase hija Auto que sobrescribe el m√©todo tipoDeVehiculo()
class Auto extends Vehiculo {
    @Override
    public void tipoDeVehiculo() {
        System.out.println("Esto es un coche");
    }
}

// Clase hija Moto que sobrescribe el m√©todo tipoDeVehiculo()
class Moto extends Vehiculo {
    @Override
    public void tipoDeVehiculo() {
        System.out.println("Esto es una moto");
    }
}


/* Ambas clases heredan de Vehiculo (por eso usan extends).
Implementan el m√©todo tipoDeVehiculo() a su manera (usando polimorfismo).
 */







/* ===============================
 * EJERCICIO 2: CLASES ABSTRACTAS
 * ===============================
 * Crea una clase abstracta Figura con el m√©todo abstracto calcularArea(). Luego
 * crea dos clases derivadas, Circulo y Rect√°ngulo, que implementen el m√©todo abstracto
 * de forma espec√≠fica.
 */

// Clase abstracta Figura
abstract class Figura {
    public abstract double calcularArea();
}



/* Como es abstracta, no se pueden crear objetos de Figura, solo de sus clases hijas.
Contiene el m√©todo calcularArea(), que cada subclase debe definir a su manera. */



// Clase Circulo que implementa calcularArea()
class Circulo extends Figura {
    private double radio;

    // Constructor para inicializar el radio
    public Circulo(double radio) {
        this.radio = radio;
    }

    @Override
    public double calcularArea() {
        return Math.PI * radio * radio;
    }
}

// Clase Rectangulo que implementa calcularArea()
class Rectangulo extends Figura {
    private double base;
    private double altura;

    // Constructor para inicializar base y altura
    public Rectangulo(double base, double altura) {
        this.base = base;
        this.altura = altura;
    }

    @Override
    public double calcularArea() {
        return base * altura;
    }
}


/* Circulo y Rectangulo heredan de Figura y deben implementar calcularArea().
Se usa un constructor en cada clase para inicializar los atributos (radio, base, altura).
 */



/* ===============================
 * MAIN: EJECUCI√ìN DE LOS EJEMPLOS
 * ===============================
 */

public class Main {
    public static void main(String[] args) { //Aqu√≠ es donde el programa empieza a ejecutarse.
        // POLIMORFISMO: Usamos el mismo tipo Vehiculo para distintos objetos
        Vehiculo[] vehiculos = new Vehiculo[4];
        vehiculos[0] = new Auto(); //vehiculo 0 es un auto
        vehiculos[1] = new Moto(); //vehiculo 1 es una moto
        vehiculos[2] = new Auto();
        vehiculos[3] = new Moto();


/* Se crea un array de tipo Vehiculo, pero se llenan con Auto y Moto.
Gracias al polimorfismo, podemos tratarlos a todos como Vehiculo.


Cuando tipoDeVehiculo() se llama en v, Java busca la implementaci√≥n en la clase espec√≠fica del objeto
 (no en la referencia).
üîπ Aunque vehiculos es un array de Vehiculo, cada elemento realmente es un Auto o Moto, 
as√≠ que ejecuta el m√©todo correspondiente.*/


        // Bucle for-each para recorrer el array y llamar a tipoDeVehiculo()
        for (Vehiculo v : vehiculos) {
            v.tipoDeVehiculo();
        }

/* Es una forma mas corta de escribir : 

üîπfor (int i = 0; i < vehiculos.length; i++) {
    Vehiculo v = vehiculos[i];  // Guardamos el elemento actual en v
    v.tipoDeVehiculo();  // Llamamos a su m√©todo correspondiente
} 

"Para cada elemento del array vehiculos, gu√°rdalo en v y ejecuta tipoDeVehiculo() en √©l".

¬øC√≥mo funciona v?
üîπ v es una variable temporal que Java crea en cada iteraci√≥n del for-each.
üîπ En cada vuelta, toma el valor de un elemento del array vehiculos.
üîπ As√≠, en cada iteraci√≥n v es un objeto distinto de Vehiculo (ya sea un Auto o Moto).


En resumen:
üîπv no se define antes, sino que se crea en cada iteraci√≥n dentro del bucle for-each.
üîπEn cada vuelta, v apunta a un objeto dentro del array vehiculos.
üîπJava autom√°ticamente selecciona el siguiente elemento del array en cada iteraci√≥n.

 */

// Bucle for-each -> Llama a tipoDeVehiculo() en cada objeto, ejecutando la versi√≥n espec√≠fica de Auto o Moto.


        // CLASES ABSTRACTAS: Crear objetos de Circulo y Rectangulo
        Figura circulo = new Circulo(10);
        Figura rectangulo = new Rectangulo(4, 5);

        // Mostrar √°reas calculadas
        System.out.println("√Årea del c√≠rculo: " + circulo.calcularArea());
        System.out.println("√Årea del rect√°ngulo: " + rectangulo.calcularArea());
    }
}}


// Llama a calcularArea(), ejecutando la versi√≥n de cada subclase. 



//EJERCICIO 3 * INTERFAZ *



/* Ejercicio 3: Sistema de vehiculos
Vamos a crear un sistema con vehiculos, donde se incluyen coches, motos y bicicletas.

* Polimorfismo: Diferentes tipos de vehiculos con un comportamiento com√∫n modificado
* Abstracci√≥n: Clase abstracta Vehiculo
* Intefaces: Una interfaz Conducible para los vehiculos que pueden ser conducidos
* Atributos protegidos: Atributos accesibles solo dentro de la clase y sus sublcases */

// Interfaz que define el comportamiento de los veh√≠culos que pueden ser conducidos
public interface Conducible {
    void conducir(); // M√©todo obligatorio que implementar√°n los veh√≠culos
}

// Clase abstracta Vehiculo que ser√° la base para Coche y Moto
public abstract class Vehiculo implements Conducible {
    
    protected String marca; // Marca del veh√≠culo (accesible solo en subclases)
    protected String modelo; // Modelo del veh√≠culo (accesible solo en subclases)

    // Constructor para inicializar marca y modelo
    public Vehiculo(String marca, String modelo) {
        this.marca = marca;
        this.modelo = modelo;
    }

    // M√©todo abstracto que obliga a las subclases a definir el tipo de veh√≠culo
    public abstract void tipoDeVehiculo();

    // Implementaci√≥n por defecto de conducir(), puede ser sobrescrita en las subclases
    @Override
    public void conducir() {
        System.out.println("Estoy conduciendo un veh√≠culo");
    }

    // M√©todo para mostrar la informaci√≥n del veh√≠culo
    public void mostrarInfo() {
        System.out.println("Marca: " + marca);
        System.out.println("Modelo: " + modelo);
    }
}

// Clase Coche que extiende de Vehiculo
public class Coche extends Vehiculo {
    
    private int numeroPuertas; // N√∫mero de puertas del coche

    // Constructor que inicializa marca, modelo y n√∫mero de puertas
    public Coche(String marca, String modelo, int numeroPuertas) {
        super(marca, modelo);
        this.numeroPuertas = numeroPuertas;
    }

    // Implementaci√≥n del m√©todo abstracto tipoDeVehiculo
    @Override
    public void tipoDeVehiculo() {
        System.out.println("Esto es un coche");
    }

    // Sobrescritura del m√©todo conducir
    @Override
    public void conducir() {
        System.out.println("Conduciendo un coche: " + marca + " " + modelo);
    }
}

// Clase Moto que extiende de Vehiculo
public class Moto extends Vehiculo {
    
    private boolean tieneSidecar; // Indica si la moto tiene sidecar

    // Constructor que inicializa marca, modelo y si tiene sidecar
    public Moto(String marca, String modelo, boolean tieneSidecar) {
        super(marca, modelo);
        this.tieneSidecar = tieneSidecar;
    }

    // Implementaci√≥n del m√©todo abstracto tipoDeVehiculo
    @Override
    public void tipoDeVehiculo() {
        System.out.println("Esto es una moto");
    }

    // Sobrescritura del m√©todo conducir
    @Override
    public void conducir() {
        System.out.println("Conduciendo una moto: " + marca + " " + modelo);
    }

    // M√©todo adicional para mostrar si la moto tiene sidecar
    public void mostrarSidecar() {
        if (tieneSidecar) {
            System.out.println("La moto tiene sidecar");
        } else {
            System.out.println("La moto no tiene sidecar");
        }
    }
}


/* üõ† Conceptos clave en el Ejercicio 3:
Interfaz (Conducible)

Es un contrato que obliga a las clases que lo implementen a definir un comportamiento (conducir()).
Clase abstracta (Vehiculo)

Es una plantilla base que no se puede instanciar directamente.
Tiene atributos (marca, modelo) que las subclases heredan.
Define m√©todos (tipoDeVehiculo()) que deben implementarse en las subclases.
Puede tener m√©todos con implementaci√≥n (conducir(), mostrarInfo()).
Subclases (Coche y Moto)

Heredan de Vehiculo ‚Üí Reciben los atributos y m√©todos de Vehiculo.
Implementan Conducible ‚Üí Deben definir el m√©todo conducir().
Sobrescriben m√©todos (@Override) ‚Üí Modifican el comportamiento de tipoDeVehiculo().
Tienen atributos propios ‚Üí Coche tiene numeroPuertas, Moto tiene tieneSidecar. */